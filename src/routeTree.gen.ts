/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotFoundImport } from './routes/not-found'
import { Route as IndexImport } from './routes/index'
import { Route as ArticlesIndexImport } from './routes/articles/index'
import { Route as ArticleslayoutImport } from './routes/articles/__layout'

// Create Virtual Routes

const ArticlesImport = createFileRoute('/articles')()

// Create/Update Routes

const ArticlesRoute = ArticlesImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundRoute = NotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesIndexRoute = ArticlesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArticlesRoute,
} as any)

const ArticleslayoutRoute = ArticleslayoutImport.update({
  id: '/__layout',
  getParentRoute: () => ArticlesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesImport
      parentRoute: typeof rootRoute
    }
    '/articles/__layout': {
      id: '/articles/__layout'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticleslayoutImport
      parentRoute: typeof ArticlesRoute
    }
    '/articles/': {
      id: '/articles/'
      path: '/'
      fullPath: '/articles/'
      preLoaderRoute: typeof ArticlesIndexImport
      parentRoute: typeof ArticlesImport
    }
  }
}

// Create and export the route tree

interface ArticlesRouteChildren {
  ArticleslayoutRoute: typeof ArticleslayoutRoute
  ArticlesIndexRoute: typeof ArticlesIndexRoute
}

const ArticlesRouteChildren: ArticlesRouteChildren = {
  ArticleslayoutRoute: ArticleslayoutRoute,
  ArticlesIndexRoute: ArticlesIndexRoute,
}

const ArticlesRouteWithChildren = ArticlesRoute._addFileChildren(
  ArticlesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/articles': typeof ArticleslayoutRoute
  '/articles/': typeof ArticlesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/articles': typeof ArticlesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/articles/__layout': typeof ArticleslayoutRoute
  '/articles/': typeof ArticlesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/not-found' | '/articles' | '/articles/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/not-found' | '/articles'
  id:
    | '__root__'
    | '/'
    | '/not-found'
    | '/articles'
    | '/articles/__layout'
    | '/articles/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotFoundRoute: typeof NotFoundRoute
  ArticlesRoute: typeof ArticlesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotFoundRoute: NotFoundRoute,
  ArticlesRoute: ArticlesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/not-found",
        "/articles"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/articles": {
      "filePath": "articles",
      "children": [
        "/articles/__layout",
        "/articles/"
      ]
    },
    "/articles/__layout": {
      "filePath": "articles/__layout.tsx",
      "parent": "/articles"
    },
    "/articles/": {
      "filePath": "articles/index.tsx",
      "parent": "/articles"
    }
  }
}
ROUTE_MANIFEST_END */
